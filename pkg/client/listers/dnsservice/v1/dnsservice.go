/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "dnsservice-controller/pkg/apis/dnsservice/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DnsServiceLister helps list DnsServices.
type DnsServiceLister interface {
	// List lists all DnsServices in the indexer.
	List(selector labels.Selector) (ret []*v1.DnsService, err error)
	// DnsServices returns an object that can list and get DnsServices.
	DnsServices(namespace string) DnsServiceNamespaceLister
	DnsServiceListerExpansion
}

// myResourceLister implements the DnsServiceLister interface.
type myResourceLister struct {
	indexer cache.Indexer
}

// NewDnsServiceLister returns a new DnsServiceLister.
func NewDnsServiceLister(indexer cache.Indexer) DnsServiceLister {
	return &myResourceLister{indexer: indexer}
}

// List lists all DnsServices in the indexer.
func (s *myResourceLister) List(selector labels.Selector) (ret []*v1.DnsService, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.DnsService))
	})
	return ret, err
}

// DnsServices returns an object that can list and get DnsServices.
func (s *myResourceLister) DnsServices(namespace string) DnsServiceNamespaceLister {
	return myResourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DnsServiceNamespaceLister helps list and get DnsServices.
type DnsServiceNamespaceLister interface {
	// List lists all DnsServices in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.DnsService, err error)
	// Get retrieves the DnsService from the indexer for a given namespace and name.
	Get(name string) (*v1.DnsService, error)
	DnsServiceNamespaceListerExpansion
}

// myResourceNamespaceLister implements the DnsServiceNamespaceLister
// interface.
type myResourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DnsServices in the indexer for a given namespace.
func (s myResourceNamespaceLister) List(selector labels.Selector) (ret []*v1.DnsService, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.DnsService))
	})
	return ret, err
}

// Get retrieves the DnsService from the indexer for a given namespace and name.
func (s myResourceNamespaceLister) Get(name string) (*v1.DnsService, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("dnsservice"), name)
	}
	return obj.(*v1.DnsService), nil
}
